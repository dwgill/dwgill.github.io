<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tetrahedrons &amp; Terminals</title><link href="http://dwgill.com/" rel="alternate"></link><link href="http://dwgill.com/feeds/all.atom.xml" rel="self"></link><id>http://dwgill.com/</id><updated>2017-07-10T10:15:00-04:00</updated><entry><title>Aeon: Of Money and Morals</title><link href="http://dwgill.com/posts/2017/07/10/link-aeon-of-money-and-morals-alex-mayyasi/" rel="alternate"></link><published>2017-07-10T10:15:00-04:00</published><updated>2017-07-10T10:15:00-04:00</updated><author><name>Daniel Gill</name></author><id>tag:dwgill.com,2017-07-10:/posts/2017/07/10/link-aeon-of-money-and-morals-alex-mayyasi/</id><summary type="html">&lt;p&gt;An interesting article on the history of the ethics of moneylending&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://aeon.co/essays/how-did-usury-stop-being-a-sin-and-become-respectable-finance"&gt;Aeon recently published an fascinating essay on the history of ethical thought
around moneylending&lt;/a&gt;, particularly the practice of
&lt;a href="https://en.wikipedia.org/wiki/Usury"&gt;&lt;em&gt;usury&lt;/em&gt;&lt;/a&gt;, or lending money with interest. The primary contention
of the article is that ethical philosophers and theologians used to extensively
consider and write on the ethics of business and finance, but that's largely
left to economists, who since the 20th century have largely forgone conducting
ethical assessments in lieue of becoming scientists of economic phenomena.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It wasn’t until the rise of neoclassical economics in the 20th century that
economics became the supposedly scientific study of self-interest and individual
incentives – a domain in which economists do not pass judgment on actors in the
market, any more than biologists would judge the ‘morality’ of bees, or
engineers the ‘ethics’ of an aqueduct.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alex Mayyasi would like the moral philosophers and theologians to once again
consider at length the ethical questions surrounding individual financial
arrangements and economic phenomena. It's a very interesting idea, and I recommend
the essay.&lt;/p&gt;
&lt;p&gt;What's also so interesting to me, however, is just how much of a gap there seems
to be between a modern conception of interest-laden loans and what seems to have
been a nearly-universal condemnation of the practice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In de Vitry’s world, the moneylender deserved to be defiled by demons, because
he’d committed the sin of usury – charging interest on a loan. De Vitry didn’t
care whether the rate was high or low, because the Church’s position was that
extracting a single cent of interest was evil. The roots of this revulsion
run deep, and across cultures. Vedic law in Ancient India condemned usury, and
rulers routinely capped interest rates from Ancient Mesopotamia to Ancient Greece.
In &lt;em&gt;Politics&lt;/em&gt;, Aristotle described usury as ‘the birth of money from money’, and
claimed it was unnatural because money was sterile and should not ‘breed’.&lt;/p&gt;
&lt;p&gt;Judeo-Christian religions cemented the usury taboo. The Old Testament reads:
‘Do not charge a fellow Israelite interest,’ and the Book of Luke advises:
‘[L]ove ye your enemies: do good, and lend, hoping for nothing thereby.’ In
the 4th century CE, Christian councils denounced the practice, and by 800,
the emperor Charlemagne made the prohibition into law. Accounts of merchants
and bankers in the Middle Ages frequently include expressions of anguish over
their profits. In his Divine Comedy of the 14th century, the Italian poet
Dante Alighieri put the usurers in the seventh circle of Hell; in the case of
Reginaldo Scrovegni, one Paduan banker singled out by Dante, his son ended up
commissioning a chapel painted with frescoes by Giotto to expiate the
family’s sin. Over the ensuing centuries, the philanthropy and patronage of
other Italian Renaissance families such as the Medicis was partly inspired by
guilt about how they’d profited from charging interest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that until at least the reformation, offering a loan with interest
was inconceivable as anything but inherently exploitative. An interesting
example of how much moral values have shifted over time, and a reminder that
ethical considerations have as much to do with the meaning and values we
ascribe to the things under consideration as they do with anything else.
Think of Aristotle's conception of money as "sterile," and how the sum-total
of his condemnation of interest stems from it.&lt;/p&gt;</content><category term="link"></category><category term="aeon"></category><category term="alex mayyasi"></category><category term="philosophy"></category><category term="economics"></category><category term="history"></category><category term="ethics"></category></entry><entry><title>Keeping Notes on Secret Doors</title><link href="http://dwgill.com/posts/2017/04/22/keeping-notes-on-secret-doors/" rel="alternate"></link><published>2017-04-22T10:46:00-04:00</published><updated>2017-04-22T10:46:00-04:00</updated><author><name>Daniel Gill</name></author><id>tag:dwgill.com,2017-04-22:/posts/2017/04/22/keeping-notes-on-secret-doors/</id><summary type="html">&lt;p&gt;Some notes on documenting secret doors in Dungeons &amp;amp; Dragons&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started semi-regularly running games of Dungeons &amp;amp; Dragons recently,
and I've since been devouring all the advice on it I can read. I'm
particularly fond of the &lt;a href="https://media.wizards.com/2017/dnd/downloads/0227_UATraps.pdf"&gt;Unearthed Arcana on the subject&lt;/a&gt;
that Wizards of the Coast released a few months back, and appreciated
the structure suggested therein in articulating a trap: &lt;em&gt;Level and
Threat&lt;/em&gt;, &lt;em&gt;Trigger&lt;/em&gt;, and &lt;em&gt;Effect&lt;/em&gt;. I've found this very useful in
guiding my thinking, and thought something similar might be useful in
describing secret doors and passages.&lt;/p&gt;
&lt;h2&gt;A Tentative Format for Describing Secret Doors&lt;/h2&gt;
&lt;p&gt;The tentative elements I've come up with are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Concealment:&lt;/em&gt; A description of the door/mechanism and how it is
  obscured from immediate detection or otherwise obstructs wanderers
  from opening it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Trigger:&lt;/em&gt; Detail of how the door/mechanism is opened/operated.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Discovery:&lt;/em&gt; Example means by which characters might discover
  the secret door and determine how to open it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Destination:&lt;/em&gt; What opening the secret door uncovers and/or where the
  hidden passage leads.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example Secret Doors&lt;/h2&gt;
&lt;p&gt;I'm currently building a dungeon set in an ancient, abandoned Dwarven
mine, so I'll share the two secret doors I've come up with for that
project here. &lt;/p&gt;
&lt;h3&gt;Drarven Statue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Concealment:&lt;/em&gt; A statue of a stately dwarf stands in the corner of a
  fork in the dungeon, extending an arm that raises an axe above his
  head.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Trigger:&lt;/em&gt; Pull the arm down like a lever. It ratchets with a winding
  sound until it reaches the bottom of its arc, then the statue pulls 
  backward like a door on a hinge while the arm raises.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Discovery:&lt;/em&gt; A DC 15 Wisdom (Perception) check of the statue reveals
  seams around the base of the arm. A DC 15 Investigation check of
  the corner in general reveals a hallow sound to the walls about
  the corner, suggesting there is space in the interior.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Destination:&lt;/em&gt; Opens into a cramped passage that leads directly to a
  hidden room full of treasure where a mimic lies in wait.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Banquet Hall Mosaic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Concealment:&lt;/em&gt; An elaborate 20 ft. mosaic that decorates a large
  banquet hall in the west end of the dungeon, depicting a great battle
  between the founders of the mine and hostile invaders, and obscuring
  a secret door embedded in the wall itself.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Trigger:&lt;/em&gt; Press in the eyes of the central heroic dwarf, and the door
  will unhook from the wall on one side and drift slightly forward on a
  hinge, eventually revealing a 5' wide opening if pulled the rest of
  the way. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Discovery:&lt;/em&gt; A DC 18 Wisdom (Perception) check reveals the fine seams
  that outline the door. A DC 15 Intelligence (Investigation) check
  determines that the aforementioned eyes of the hero of the mosaic have
  a polished or worn quality to them, indicative of how more frequently
  they were touched compared to the rest of the mosaic. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Destination:&lt;/em&gt; The door opens into a passageway that goes down to
  the second floor of the dungeon, leading to hidden cells where secret
  prisoners were once kept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I'm not sure how practical it is to use this format for describing
secret doors in my notes in preparing for sessions. I'm still new to
dungeon mastering, and I'm not sure how verbose I'm ultimately going
to want my notes to be. Regardless, I think I'm finding it useful in
guiding my thinking in designing secret doors. &lt;/p&gt;</content><category term="rpg"></category><category term="d&amp;d"></category><category term="d&amp;d 5e"></category><category term="game mastering"></category><category term="secret doors"></category></entry><entry><title>This Blog Runs on Pelican</title><link href="http://dwgill.com/posts/2017/04/21/this-blog-runs-on-pelican/" rel="alternate"></link><published>2017-04-21T13:53:00-04:00</published><updated>2017-04-24T11:00:00-04:00</updated><author><name>Daniel Gill</name></author><id>tag:dwgill.com,2017-04-21:/posts/2017/04/21/this-blog-runs-on-pelican/</id><summary type="html">&lt;p&gt;A detailed breakdown of how this blog is coded &amp;amp; built&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog is built using the &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; static site generator,
written in &lt;a href="https://en.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt;, and utilizes the &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; pelican theme.
I'm actually writing this post as I set up the site for the first time,
partially so that I can document everything for myself, and hopefully
because it will be of some use for anyone else who finds him-or-herself
dealing with this in the future.&lt;/p&gt;
&lt;p&gt;Pelican is a static site generator, which means basically that allows me
to write content for this blog in simple &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; files,
and uses those files to generate the individual pages of this website.
It takes my markdown files as input, and outputs the entire body of
html files that comprise this website. I can then take those html
files and host them anywhere I like—on my own server, or on 
&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;Pelican has a pretty simple quickstart process, which can be found
&lt;a href="http://docs.getpelican.com/en/stable/install.html"&gt;here&lt;/a&gt;. Altogether my first steps looked like the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;project_dir&amp;gt;
virtualenv .venv
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
pip install pelican markdown
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was straightforward enough (the living hell of trying to figure
out a name for this blog notwithstanding), but the next step was
bettering the look of the site. The default look of Pelican is not the
greatest. For example, &lt;a href="https://blog.getpelican.com/"&gt;here&lt;/a&gt; is the official Pelican
website at the time of this writing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="getpelican.com circa 2017" src="http://dwgill.com/images/code/getpelican-site-2017-04-20.png" /&gt;&lt;/p&gt;
&lt;p&gt;Not my style, and not responsive besides. I looked through the themes
available on &lt;a href="http://www.pelicanthemes.com/"&gt;pelicanthemes.com&lt;/a&gt; and found &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; to be to my
taste while not complicating things too much up front. Pelican seems to
half-expect you to install themes via the &lt;code&gt;pelican-themes&lt;/code&gt; program
which is installed alongside Pelican, but that seems to operate by
installing themes on a system wide basis and I preferred to have the
project self-contained in my Git repo as much as possible. I ended up
going with putting the Flex's git repo in a git
&lt;a href="https://git-scm.com/docs/git-submodule"&gt;submodule&lt;/a&gt; of my project repository. An introduction to 
Git is beyond the purview of this article (I got myself familiar with it 
with the &lt;a href="https://www.codeschool.com/courses/git-real"&gt;Code School course&lt;/a&gt;, personally), but
&lt;a href="https://git-scm.com/docs/git-submodule"&gt;Git submodules&lt;/a&gt; aren't all that common, and as that's
what I ended up going with I figured I might detail what I did. At the
very least, it will be useful when I come back in a while wondering how
the devil you're supposed to handle a Git submodule.&lt;/p&gt;
&lt;p&gt;I added the flex repo to my project like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir themes
git submodule add https://github.com/alexandrevicenzi/Flex themes/flex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm unsure if this did both the work of formally adding the
submodule to the project (i.e. creating/modifying the &lt;code&gt;.gitmodules&lt;/code&gt;
file) &lt;em&gt;and&lt;/em&gt; checking out the contents the submodule, but it may be the
case when a new submodule is added that you still need to initiate the
process of cloning/checking out the repo. You can do this with the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule update --init themes/flex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that command the entire contents of the &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; repo should
be in the local directory &lt;code&gt;themes/flex&lt;/code&gt;, which means I can now add the
theme to my Pelican configuration &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;themes/flex&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The theme is straightforward enough, but not as documented as it could
be, and I'm having to figure out some details by looking at the
&lt;a href="https://github.com/alexandrevicenzi/Flex/blob/master/tests/pelicanconf.py"&gt;test configuration&lt;/a&gt;. For example, it turns out you need
to explicitly enable &amp;amp; configure the menu menu at the top of the page;
it doesn't just list whatever 'pages' you have on your site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MAIN_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Archives&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/archives.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/categories.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tags.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additionally—and I'm not sure if this is specific to the Flex theme or
how you configure it for Pelican sites in general—I found that the
Favicon could be configured by setting the &lt;code&gt;FAVICON&lt;/code&gt; variable in my
configuration, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/images/favicon-red.ico&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case &lt;code&gt;images/&lt;/code&gt; is a subdirectory of my &lt;code&gt;content/&lt;/code&gt; folder, which
is where I put all of my site content, and futhermore I specify that
&lt;code&gt;images&lt;/code&gt; is one of my &lt;code&gt;STATIC_PATHS&lt;/code&gt;, which I believe means the contents
of &lt;code&gt;images&lt;/code&gt; will be included in the generated site output irrespective of
whether Pelican finds any markdown posts in it to generate into articles.&lt;/p&gt;
&lt;p&gt;I'm now going to try and get this site up on my Github pages, which means
if you're reading this you can expect an update shortly on how I did
that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, getting it up on github pages had some snags. The biggest one I
learned—and I believe this is particular to the configuration of the
Flex theme—is that it is crucial that the &lt;code&gt;SITEURL&lt;/code&gt; variable accurately
reflex whatever URL the reader's browser is using to access the page.
I had an initial goof where I set my &lt;code&gt;SITEURL&lt;/code&gt; to &lt;code&gt;dwgill.github.com&lt;/code&gt;
and it broke all the CSS, as the webpage was requesting all of its
assets at the wrong domain. The maddening thing was is that Github will
try to gracefully redirect you to the corresponding page on
&lt;code&gt;*.github.io&lt;/code&gt;, but that is still enough to break assets, even if the
link ends up looking perfectly valid when I visit it in my browser.&lt;/p&gt;
&lt;p&gt;The other tricky thing was setting up the CNAME, but the &lt;a href="http://docs.getpelican.com/en/stable/tips.html#extra-tips"&gt;Pelican
documentation lays that out&lt;/a&gt; pretty neatly (once you find
the corner of the documentation it's hidden in).&lt;/p&gt;
&lt;p&gt;So, all told my configuration for github pages amounts to these lines in
my publish config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_use_custom_domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_use_custom_domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://dwgill.com&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# STATIC_PATHS wasn&amp;#39;t defined&lt;/span&gt;
        &lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://dwgill.github.io&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This both sets the value of &lt;code&gt;SITEURL&lt;/code&gt; and insures the &lt;code&gt;CNAME&lt;/code&gt; file in
&lt;code&gt;/content/extra&lt;/code&gt; will be output on the top level of the project as
&lt;code&gt;/CNAME&lt;/code&gt;. The content of &lt;code&gt;CNAME&lt;/code&gt; is just the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dwgill.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This basically means that Github will look at the content of that CNAME,
and any requests it receives at its ip addresses of &lt;code&gt;192.30.252.153&lt;/code&gt; and
&lt;code&gt;192.30.252.154&lt;/code&gt; addressed to &lt;code&gt;dwgill.com&lt;/code&gt; will be served the files in
my project repo. All I had to do next was point my domain of
&lt;code&gt;dwgill.com&lt;/code&gt; at those ip addresses. The documentation for this can be
found &lt;a href="https://help.github.com/articles/setting-up-an-apex-domain/"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="code"></category><category term="python"></category><category term="personal projects"></category></entry></feed>